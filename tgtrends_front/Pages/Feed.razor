@page "/"
@using tgtrends_front.Data
@using tgtrends_front.Pages.Components
@using tgtrends_front.Services

@inject ChannelsService ChannelsService

<link href="styles/feed.css" rel="stylesheet" />

<div class="header">
    <div class="header__dropdown">
        <button class="button">For You</button>
        <svg width="24" height="13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12.0071 12C12.3226 12 12.638 11.8979 12.853 11.6811L21.6559 3.79846C21.8709 3.60714 22 3.35203 22 3.05867C22 2.45918 21.4981 2 20.8243 2C20.5089 2 20.1936 2.12755 19.9784 2.30612L11.3333 10.0229H12.6666L4.0215 2.30612C3.80645 2.12755 3.51971 2 3.18996 2C2.51613 2 2 2.45918 2 3.05867C2 3.35203 2.12903 3.60714 2.34409 3.79846L11.1613 11.6811C11.3907 11.8979 11.6774 12 12.0071 12Z" fill="white" />
        </svg>
        <div class="dropdown__content">
            <button class="button">Following</button>
            <button class="button">News</button>
            <button class="button">Humor</button>
            <button class="button">Facts</button>
            <button class="button">Music</button>
            <button class="button">Sports</button>
        </div>
    </div>
    <div class="header__info">
        <button class="info__tokens button button--blurred">
            <img src="images/Token.png" alt="Token icon"/>
            <span>200</span>
        </button>
        <button class="header__profile button button--blurred">
            <img src="images/User.png" alt="User icon"/>
        </button>
    </div>
</div>
<div class="image image__shadow-top"></div>
<div class="slider">
    @foreach (var message in Messages)
    {
        <Message MessageData="message"></Message>
    }
</div>

@code
{
    public List<MessageData> Messages { get; private set; } = new();
    
    protected override Task OnInitializedAsync()
    {
        ChannelsService.OnMessagesUpdated += UpdateMessages;
        
        return base.OnInitializedAsync();
    }

    private void UpdateMessages()
    {
        Messages = ChannelsService.Messages;
        StateHasChanged();
    }
}
